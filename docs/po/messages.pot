
msgid ""
msgstr ""
"Project-Id-Version: ezlog documentation\n"
"POT-Creation-Date: 2023-10-17T01:17:24+08:00\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: src/SUMMARY.md:3
msgid "Introduction"
msgstr ""

#: src/SUMMARY.md:5
msgid "Quick Start"
msgstr ""

#: src/SUMMARY.md:7
msgid "Flutter"
msgstr ""

#: src/SUMMARY.md:8
msgid "Android"
msgstr ""

#: src/SUMMARY.md:9
msgid "iOS"
msgstr ""

#: src/SUMMARY.md:10
msgid "Rust"
msgstr ""

#: src/SUMMARY.md:12
#: src/benchmark.md:1
msgid "Benchmark"
msgstr ""

#: src/SUMMARY.md:14
#: src/architecture.md:1
msgid "Architecture"
msgstr ""

#: src/SUMMARY.md:16
#: src/build.md:1
msgid "Build"
msgstr ""

#: src/introduction.md:1
#: src/benchmark.md:11
msgid "ezlog"
msgstr ""

#: src/introduction.md:3
msgid "[中文介绍](https://s1rius.github.io/ezlog/zh/index.html)"
msgstr ""

#: src/introduction.md:5
msgid "What is ezlog?"
msgstr ""

#: src/introduction.md:7
msgid "ezlog is a high-performance cross-platform file logging library."
msgstr ""

#: src/introduction.md:9
msgid "It can be used in Flutter, Android, iOS, Windows, Linux, MacOS."
msgstr ""

#: src/introduction.md:11
msgid ""
"It is inspired by [Xlog](https://github.com/Tencent/mars) and "
"[Logan](https://github.com/Meituan-Dianping/Logan), rewrite in Rust."
msgstr ""

#: src/introduction.md:13
msgid "Features"
msgstr ""

#: src/introduction.md:14
msgid "multi platform: Flutter, Android, iOS, Windows, Linux, MacOS"
msgstr ""

#: src/introduction.md:15
msgid ""
"map file into memory by "
"[mmap](https://man7.org/linux/man-pages/man2/mmap.2.html)."
msgstr ""

#: src/introduction.md:16
msgid "compression support, eg: [zlib](https://en.wikipedia.org/wiki/Zlib)."
msgstr ""

#: src/introduction.md:17
msgid ""
"encryption support, eg: [AEAD "
"encryption](https://en.wikipedia.org/wiki/Authenticated_encryption)."
msgstr ""

#: src/introduction.md:18
msgid "fetch log by callback."
msgstr ""

#: src/introduction.md:19
msgid "trim out of date files."
msgstr ""

#: src/introduction.md:20
msgid "command line parser support."
msgstr ""

#: src/introduction.md:22
msgid "License"
msgstr ""

#: src/introduction.md:24
msgid ""
"See [LICENSE-MIT](../../LICENSE-MIT), [LICENSE-APACHE](../../LICENSE-APACHE)"
msgstr ""

#: src/platform/flutter.md:1
msgid "Flutter Usage"
msgstr ""

#: src/platform/flutter.md:3
msgid "Add ezlog_flutter as a dependency in your pubspec.yaml file."
msgstr ""

#: src/platform/flutter.md:10
#: src/platform/rust.md:12
msgid "Example"
msgstr ""

#: src/platform/flutter.md:12
msgid ""
"```dart\n"
"import 'dart:io';\n"
"import 'package:flutter/material.dart';\n"
"import 'dart:async';\n"
"import 'package:ezlog_flutter/ezlog_flutter.dart';\n"
"import 'package:path_provider/path_provider.dart';\n"
"\n"
"void main() {\n"
"  runApp(const MyApp());\n"
"}\n"
"\n"
"class MyApp extends StatefulWidget {\n"
"  const MyApp({Key? key}) : super(key: key);\n"
"\n"
"  @override\n"
"  State<MyApp> createState() => _MyAppState();\n"
"}\n"
"\n"
"class _MyAppState extends State<MyApp> {\n"
"\n"
"  @override\n"
"  void initState() {\n"
"    super.initState();\n"
"    initEZLog();\n"
"  }\n"
"\n"
"  Future<void> initEZLog() async {\n"
"    EZLog.init(true);\n"
"    Directory appDocDir = await getApplicationSupportDirectory();\n"
"    String logDir = '${appDocDir.path}/ezlog';\n"
"\n"
"    var logger = EZLogger.config(\n"
"        EZLogConfig.plaintext(\"main\", Level.trace.id, logDir, 7));\n"
"    \n"
"    logger.d(\"init\", \"success\");\n"
"\n"
"    var logs = await EZLog.requestLogFilesForDate(\"main\", "
"\"2022_08_25\");\n"
"  }\n"
"}\n"
"```"
msgstr ""

#: src/platform/android.md:1
msgid "Android Usage"
msgstr ""

#: src/platform/android.md:3
msgid "Add ezlog to dependencies"
msgstr ""

#: src/platform/android.md:5
msgid "Open top-level `build.gradle`, add `mavenCentral` to repositories."
msgstr ""

#: src/platform/android.md:25
msgid "Open app level `build.gradle`, add `ezlog`"
msgstr ""

#: src/platform/android.md:27
msgid ""
"```groovy\n"
"dependencies {\n"
"    implementation \"wtf.s1.ezlog:ezlog:0.2+\"\n"
"}\n"
"```"
msgstr ""

#: src/platform/android.md:33
msgid "Sync gradle"
msgstr ""

#: src/platform/android.md:35
msgid "Setup in application"
msgstr ""

#: src/platform/android.md:37
msgid ""
"```kotlin\n"
"override fun onCreate() {\n"
"    super.onCreate()\n"
"\n"
"    val path = File(filesDir, \"ezlog\").absolutePath\n"
"    val config = EZLogConfig.Builder(\"demo\", path)\n"
"        .compress(EZLog.CompressZlib)\n"
"        .compressLevel(EZLog.CompressFast)\n"
"        .cipher(EZLog.Aes128Gcm)\n"
"        .cipherKey(\"a secret key!!!!\".toByteArray())\n"
"        .cipherNonce(\"unique nonce\".toByteArray())\n"
"        .enableTrace(BuildConfig.DEBUG)\n"
"        .build()\n"
"    EZLog.initWith(config)\n"
"\n"
"    EZLog.v(\"ezlog\", \"first blood\")\n"
"\n"
"    EZLog.registerCallback(object : Callback {\n"
"        override fun onLogsFetchSuccess(\n"
"            logName: String?,\n"
"            date: String?,\n"
"            logs: Array<out String>?\n"
"        ) {\n"
"            Log.i(\"ezlog\", \"$logName $date ${logs.contentToString()}\")\n"
"            logs?.let {\n"
"                logs.getOrNull(0)?.let { log ->\n"
"                    Log.i(\"ezlog\", \"check file exists "
"${File(log).exists()}\")\n"
"                }\n"
"            }\n"
"        }\n"
"\n"
"        override fun onLogsFetchFail(logName: String?, date: String?, err: "
"String?) {\n"
"            Log.i(\"ezlog\", \"$logName $date $err\")\n"
"        }\n"
"    })\n"
"}\n"
"\n"
"```"
msgstr ""

#: src/platform/ios.md:1
msgid "iOS Usage"
msgstr ""

#: src/platform/ios.md:3
#: src/platform/rust.md:3
msgid "Add ezlog"
msgstr ""

#: src/platform/ios.md:5
msgid "Add dependency to Podfile"
msgstr ""

#: src/platform/ios.md:10
msgid "then"
msgstr ""

#: src/platform/ios.md:15
msgid "Open Xcode, add sample code"
msgstr ""

#: src/platform/ios.md:17
msgid ""
"```swift\n"
"import EZLog\n"
"\n"
"init() {\n"
"    pthread_setname_np(\"main\")\n"
"    #if DEBUG\n"
"    ezlogInitWithTrace()\n"
"    #else\n"
"    ezlogInit()\n"
"    #endif\n"
"    \n"
"    let dirPath = "
"URL.documents.appendingPathComponent(\"ezlog\").relativePath\n"
"\n"
"    let config = EZLogConfig(level: Level.trace,\n"
"                                dirPath: dirPath,\n"
"                                name: \"demo\",\n"
"                                keepDays: 7,\n"
"                                maxSize: 150*1024,\n"
"                                compress: CompressKind.ZLIB,\n"
"                                compressLevel: CompressLevel.DEFAULT,\n"
"                                cipher: Cipher.AES128GCM,\n"
"                                cipherKey: [UInt8](\"a secret "
"key!!!!\".utf8),\n"
"                                cipherNonce: [UInt8](\"unique "
"nonce\".utf8))\n"
"    let logger = EZLogger(config: config)\n"
"\n"
"    ezlogRegisterCallback(success: {name, date, logs in\n"
"        if !logs.isEmpty {\n"
"            for log in logs {\n"
"                print(\"name:\" + name + \" date:\" + date + \" log:\" + "
"log);\n"
"            }\n"
"        } else {\n"
"            print(\"no log found at that time\")\n"
"        }\n"
"        \n"
"    }, fail: {name, date, err in\n"
"        print(\"name:\" + name + \" date:\" + date + \" err:\" + err);\n"
"    })\n"
"    \n"
"    logger.debug(\"first blood\")\n"
"}\n"
"```"
msgstr ""

#: src/platform/ios.md:58
msgid "click run and see console ouput."
msgstr ""

#: src/platform/rust.md:1
msgid "Rust Usage"
msgstr ""

#: src/platform/rust.md:5
msgid "Add this to your Cargo.toml"
msgstr ""

#: src/platform/rust.md:7
msgid ""
"```toml\n"
"[dependencies]\n"
"ezlog = \"0.2\"\n"
"```"
msgstr ""

#: src/platform/rust.md:14
msgid ""
"```rust\n"
"use ezlog::EZLogConfigBuilder;\n"
"use ezlog::Level;\n"
"use log::{error, info, warn};\n"
"use log::{LevelFilter, Log};\n"
"\n"
"ezlog::InitBuilder::new().init();\n"
"\n"
"let config = EZLogConfigBuilder::new()\n"
"        .level(Level::Trace)\n"
"        .dir_path(\n"
"            dirs::download_dir()\n"
"                .unwrap()\n"
"                .into_os_string()\n"
"                .into_string()\n"
"                .expect(\"dir path error\"),\n"
"        )\n"
"        .build();\n"
"ezlog::create_log(config);\n"
"\n"
"info!(\"hello ezlog\");\n"
"\n"
"```"
msgstr ""

#: src/platform/rust.md:38
msgid "see more examples in examples dir."
msgstr ""

#: src/benchmark.md:3
msgid "Android Benchmark"
msgstr ""

#: src/benchmark.md:5
msgid "measure log method"
msgstr ""

#: src/benchmark.md:7
msgid "Library"
msgstr ""

#: src/benchmark.md:7
msgid "Time (ns)"
msgstr ""

#: src/benchmark.md:7
msgid "Allocations"
msgstr ""

#: src/benchmark.md:9
msgid "logcat"
msgstr ""

#: src/benchmark.md:9
msgid "2,427"
msgstr ""

#: src/benchmark.md:9
#: src/benchmark.md:11
#: src/benchmark.md:12
msgid "7"
msgstr ""

#: src/benchmark.md:10
msgid "logan"
msgstr ""

#: src/benchmark.md:10
msgid "4,726"
msgstr ""

#: src/benchmark.md:10
msgid "14"
msgstr ""

#: src/benchmark.md:11
msgid "8,404"
msgstr ""

#: src/benchmark.md:12
msgid "xlog"
msgstr ""

#: src/benchmark.md:12
msgid "12,459"
msgstr ""

#: src/benchmark.md:14
msgid "startup time"
msgstr ""

#: src/benchmark.md:16
msgid "startup baseline"
msgstr ""

#: src/benchmark.md:21
msgid "startup with ezlog time:"
msgstr ""

#: src/architecture.md:3
msgid "Code structure"
msgstr ""

#: src/architecture.md:19
msgid "Log file format"
msgstr ""

#: src/architecture.md:21
msgid "Header"
msgstr ""

#: src/architecture.md:23
msgid "Bytes Offset"
msgstr ""

#: src/architecture.md:23
msgid "Meaning"
msgstr ""

#: src/architecture.md:25
msgid "0-1"
msgstr ""

#: src/architecture.md:25
msgid "'ez'"
msgstr ""

#: src/architecture.md:26
msgid "2"
msgstr ""

#: src/architecture.md:26
msgid "Version number"
msgstr ""

#: src/architecture.md:27
msgid "3"
msgstr ""

#: src/architecture.md:27
msgid "Flag bits"
msgstr ""

#: src/architecture.md:28
msgid "4-7"
msgstr ""

#: src/architecture.md:28
msgid "Offset of recorder position in bytes"
msgstr ""

#: src/architecture.md:29
msgid "8-15"
msgstr ""

#: src/architecture.md:29
msgid "Unix timestamp (big-endian)"
msgstr ""

#: src/architecture.md:30
msgid "16"
msgstr ""

#: src/architecture.md:30
msgid "Compression type"
msgstr ""

#: src/architecture.md:31
msgid "17"
msgstr ""

#: src/architecture.md:31
msgid "Encryption type"
msgstr ""

#: src/architecture.md:32
msgid "18-21"
msgstr ""

#: src/architecture.md:32
msgid "Encryption key hash"
msgstr ""

#: src/architecture.md:34
msgid "Per log record"
msgstr ""

#: src/architecture.md:36
msgid "Byte Offset"
msgstr ""

#: src/architecture.md:36
msgid "Field Name"
msgstr ""

#: src/architecture.md:36
msgid "Description"
msgstr ""

#: src/architecture.md:38
msgid "0"
msgstr ""

#: src/architecture.md:38
msgid "Start Byte"
msgstr ""

#: src/architecture.md:38
msgid "Always 0x3b indicating the start"
msgstr ""

#: src/architecture.md:39
msgid "1-varint"
msgstr ""

#: src/architecture.md:39
msgid "Record Length"
msgstr ""

#: src/architecture.md:39
msgid "A variable-length integer that specifies the length"
msgstr ""

#: src/architecture.md:40
msgid "varint+1-varint+n"
msgstr ""

#: src/architecture.md:40
msgid "Record Content"
msgstr ""

#: src/architecture.md:40
msgid "The actual log record content"
msgstr ""

#: src/architecture.md:41
msgid "varint+n+1"
msgstr ""

#: src/architecture.md:41
msgid "End Byte"
msgstr ""

#: src/architecture.md:41
msgid "Always 0x21 indicating the end"
msgstr ""

#: src/architecture.md:43
msgid "Compression"
msgstr ""

#: src/architecture.md:45
msgid "We use zlib as the compression algorithm."
msgstr ""

#: src/architecture.md:47
msgid "Encryption"
msgstr ""

#: src/architecture.md:49
msgid "We use AES-GCM-SIV as the encryption algorithm."
msgstr ""

#: src/architecture.md:51
msgid ""
"AES-GCM-SIV, as a symmetric encryption algorithm, is more efficient compared "
"to asymmetric encryption. As an AEAD, When compared to AES-CFB, it is more "
"secure, and when compared to AES-GCM, AES-GCM-SIV is nonce-misuse-resistant."
msgstr ""

#: src/architecture.md:53
msgid "Make nonce not repeat"
msgstr ""

#: src/architecture.md:55
msgid ""
"First of all, we need an init nonce, which is generated randomly when the "
"logger is created. Then, we get the timestamp of the log file creation. When "
"we write a log record, we know the current index of the log file, and we can "
"calculate the nonce of the current log record by the following formula:"
msgstr ""

#: src/build.md:3
msgid "install and config rust"
msgstr ""

#: src/build.md:5
msgid ""
"```shell\n"
"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n"
"source $HOME/.cargo/env\n"
"```"
msgstr ""

#: src/build.md:10
msgid "use rust nightly"
msgstr ""

#: src/build.md:16
msgid ""
"we use "
"[build-std](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std) "
"feature, so add nightly src component"
msgstr ""

#: src/build.md:22
msgid "clone repository and open in command line tool. then run"
msgstr ""

#: src/build.md:28
msgid "wait crates download..."
msgstr ""

#: src/build.md:34
msgid "for Flutter build"
msgstr ""

#: src/build.md:42
msgid "For android build"
msgstr ""

#: src/build.md:44
msgid "add android targets"
msgstr ""

#: src/build.md:50
msgid "we use `cargo-ndk` to build dylib"
msgstr ""

#: src/build.md:56
msgid "cd android"
msgstr ""

#: src/build.md:62
msgid "then open current workspace in AndroidStudio"
msgstr ""

#: src/build.md:64
msgid "For iOS build"
msgstr ""

#: src/build.md:66
msgid "add iOS targets"
msgstr ""

#: src/build.md:73
msgid "install `cbindgen`"
msgstr ""

#: src/build.md:79
msgid "cd ios dir"
msgstr ""

#: src/build.md:85
msgid "open the `ios/EZlog.xcworkspace` in Xcode"
msgstr ""

